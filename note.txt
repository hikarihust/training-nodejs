
									Training Nodejs
	
------------------------------------------------------------------------------------------------------------
	
- Cài đặt Nodejs:
	Truy cập vào trang web của nodejs: https://nodejs.org/en/ rồi tải về phiên bản Recommended For Most Users
		rồi cài đặt
	Sau khi kết thúc phần cài đặt, để kiểm tra xem phần cài đặt có thành công hay không thì có thể dùng CMD,
		Windows PowerShell hoặc sử dụng Git Bash để kiểm tra bằng câu lệnh: node -v
	Dùng câu lệnh npm -v để kiểm tra phiên bản(Node Package Manager), khi sử dụng nodejs thì cần cài thêm các 
		package vào --> npm giúp ta cài thêm các package vào. Khi cài đặt node thì nó sẽ tự động cài thêm npm
		
- Hello NodeJS:
	Để thực thi chương trình trên Visual Studio Code thì sử dụng phím tắt là Ctrl + `
	https://nodejs.org --> DOCS --> Guides --> tạo 1 tập tin là app.js và thực thi chương trình bằng câu lệnh 
		node app.js --> Truy cập http://127.0.0.1:3000/ <--> http://localhost:3000
	const http = require('http'): Nodejs nó là tập hợp của rất nhiều module, có rất nhiều module được xây dựng
		sẵn, khi muốn sử dụng module nào thì sử dụng require + tên của module
	http.createServer(): Tạo ra Server
		req: Request là gì
		res: Response là gì
		res.end('Hello World\n') --> Trả về kết quả là 'Hello World\n'
	Ngắt kết nối: Ctrl + C
	
- Module:
	Tự viết 1 module và gọi vào để dùng.
	module.exports: Để dùng được module này thì cần phải exports ra
	Ở bên tập tin cần sử dụng phải kéo module đó vào bằng require
	listen(moduleOne.port): Các tham số ở đằng sau như hostname hay Error function thì nó sẽ sử dụng các giá trị
		mặc định
		
- Output HTML tag:
	Cách trả về 1 đoạn HTML hay 1 trang HTML
	require('./mmodule/config'): cùng thư mực với mmodule
	res.setHeader('Content-Type', 'text/text'): Xuất ra text
		res.end('<h1>Hello NodeJS</h1>');
	res.setHeader('Content-Type', 'text/html'): Xuất ra HTML
		res.end('<h1>Hello NodeJS</h1>');
		
- Sử dụng nodemon:
	Ở các phần trên cứ mỗi lần chỉnh sửa thì chúng ta phải ngắt server rồi sau đó chạy lại câu lệnh là node + tên
		tập tin(app.js)
	Để khi mà thay đổi tập tin mà không cần ngắt và chạy lại
	Keyword: nodemon npm
	Cách sử dụng nodemon: nodemon [your node app]
	
- Output HTML file: Đọc 1 tập tin HTML và xuất tập tin ra khi truy cập vào Site
	nodejs open html file
	fs.readFile(file[, options], callback)
	
- Routing:
	Vấn đề là làm sao để người dùng lấy được giá trị nhập trên URL ---> có thể dùng đến module mới đó là url
	Keyword liên quan: How to get the full url in Express?
	Giảm ngắn lại mã trong tập tin app.js --> Tách riêng code 1 số phần
	-->Viết gọn lại phần mã nguồn cho Routing 

			-----------------------------------------------------------------------------------------

										Express
-----> Là 1 Framework cho NodeJs

- Express generator:
	Site: https://expressjs.com/
	Express generator: Là 1 công cụ giúp ta tạo nhanh ra một ứng dụng trên Express
	Cách cài: npm install express-generator -g
	Cách tạo nhanh một ứng dụng: express --view=pug myapp
		--view: nó sẽ add vào 1 view engine, view engine này có thể là ejs|hbs|hjs|jade|pug|twig|vash
			như ở câu lệnh trên thì sẽ add vào view engine là pug
	Keyword: express template engine
	Trong phần này mình sẽ sử dụng template engine là ejs -> cài đặt: express --view=ejs project-nodejs
	Sau khi quá trình cài đặt kết thúc thì vào trong folder project-nodejs rồi chạy câu lệnh: npm install
	Khởi động server nodejs: npm start rồi sau đó vào http://localhost:3000/ để xem project được tạo ra

- Express structure:
	Tìm hiểu một số folder và tập tin khi mình tạo ra bằng Express generator
	Folder bin: có chứa tập tin là www. Kéo vào tập tin app và module http, và thực hiện khai báo port
		--> có thể thực hiên thay đổi được giá trị của port ở đây
	Folder node_modules: Khi sử dụng npm để cài đặt những thư viện, module để cài đặt về thì nó sẽ nằm 
		trong folder này(express, ejs)
		Khi mà thực hiện copy source code từ máy này sang máy khác thì chỉ cần Copy hết các tập tin và thư
			mục ngoại trừ thư mục node_modules này rồi sau đó dùng câu lệnh npm install để cài đặt --> nó 
			tạo ra folder node_modules và tự động download các package module về, chúng ta sử dụng các package
			module nào thì nó đều khai báo trong package.json
	Folder public: Là nơi chứa hình ảnh trong ứng dụng, js trong javascripts, css trong stylesheets
	Folder routes: Giúp ta khai báo các đường dẫn--> điều hướng đến các trang cần mở
	Folder views: Chứa các tập tin view
	Tập tin app.js: 
		Thực hiện kéo vào module express: var express = require('express')
		Tạo ra 1 app bằng cách sử dụng express: var app = express()
		app khai báo vị trí của folder views: app.set('views', path.join(__dirname, 'views')) , nếu mà mình 
			không muốn folder views có tên là views mà là tên khác thì chỉ cần cấu hình lại ở đây
		Cấu hình view engine: app.set('view engine', 'ejs')
		app.use(express.static(path.join(__dirname, 'public'))): Khai báo các tài nguyên về css, js, image thì
			vào bên trong folder public để lấy lên, nếu ko muốn để tên là public thì mình có thể đổi lại là được
		Khai báo sử dụng routes:
			app.use('/', indexRouter), trong đó: var indexRouter = require('./routes/index');
			app.use('/users', usersRouter), trong đó: var usersRouter = require('./routes/users');