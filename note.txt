
									Training Nodejs
	
------------------------------------------------------------------------------------------------------------
	
- Cài đặt Nodejs:
	Truy cập vào trang web của nodejs: https://nodejs.org/en/ rồi tải về phiên bản Recommended For Most Users
		rồi cài đặt
	Sau khi kết thúc phần cài đặt, để kiểm tra xem phần cài đặt có thành công hay không thì có thể dùng CMD,
		Windows PowerShell hoặc sử dụng Git Bash để kiểm tra bằng câu lệnh: node -v
	Dùng câu lệnh npm -v để kiểm tra phiên bản(Node Package Manager), khi sử dụng nodejs thì cần cài thêm các 
		package vào --> npm giúp ta cài thêm các package vào. Khi cài đặt node thì nó sẽ tự động cài thêm npm
		
- Hello NodeJS:
	Để thực thi chương trình trên Visual Studio Code thì sử dụng phím tắt là Ctrl + `
	https://nodejs.org --> DOCS --> Guides --> tạo 1 tập tin là app.js và thực thi chương trình bằng câu lệnh 
		node app.js --> Truy cập http://127.0.0.1:3000/ <--> http://localhost:3000
	const http = require('http'): Nodejs nó là tập hợp của rất nhiều module, có rất nhiều module được xây dựng
		sẵn, khi muốn sử dụng module nào thì sử dụng require + tên của module
	http.createServer(): Tạo ra Server
		req: Request là gì
		res: Response là gì
		res.end('Hello World\n') --> Trả về kết quả là 'Hello World\n'
	Ngắt kết nối: Ctrl + C
	
- Module:
	Tự viết 1 module và gọi vào để dùng.
	module.exports: Để dùng được module này thì cần phải exports ra
	Ở bên tập tin cần sử dụng phải kéo module đó vào bằng require
	listen(moduleOne.port): Các tham số ở đằng sau như hostname hay Error function thì nó sẽ sử dụng các giá trị
		mặc định
		
- Output HTML tag:
	Cách trả về 1 đoạn HTML hay 1 trang HTML
	require('./mmodule/config'): cùng thư mực với mmodule
	res.setHeader('Content-Type', 'text/text'): Xuất ra text
		res.end('<h1>Hello NodeJS</h1>');
	res.setHeader('Content-Type', 'text/html'): Xuất ra HTML
		res.end('<h1>Hello NodeJS</h1>');
		
- Sử dụng nodemon:
	Ở các phần trên cứ mỗi lần chỉnh sửa thì chúng ta phải ngắt server rồi sau đó chạy lại câu lệnh là node + tên
		tập tin(app.js)
	Để khi mà thay đổi tập tin mà không cần ngắt và chạy lại
	Keyword: nodemon npm
	Cách sử dụng nodemon: nodemon [your node app]
	
- Output HTML file: Đọc 1 tập tin HTML và xuất tập tin ra khi truy cập vào Site
	nodejs open html file
	fs.readFile(file[, options], callback)
	
- Routing:
	Vấn đề là làm sao để người dùng lấy được giá trị nhập trên URL ---> có thể dùng đến module mới đó là url
	Keyword liên quan: How to get the full url in Express?
	Giảm ngắn lại mã trong tập tin app.js --> Tách riêng code 1 số phần
	-->Viết gọn lại phần mã nguồn cho Routing 

			-----------------------------------------------------------------------------------------

										Express
-----> Là 1 Framework cho NodeJs

- Express generator:
	Site: https://expressjs.com/
	Express generator: Là 1 công cụ giúp ta tạo nhanh ra một ứng dụng trên Express
	Cách cài: npm install express-generator -g
	Cách tạo nhanh một ứng dụng: express --view=pug myapp
		--view: nó sẽ add vào 1 view engine, view engine này có thể là ejs|hbs|hjs|jade|pug|twig|vash
			như ở câu lệnh trên thì sẽ add vào view engine là pug
	Keyword: express template engine
	Trong phần này mình sẽ sử dụng template engine là ejs -> cài đặt: express --view=ejs project-nodejs
	Sau khi quá trình cài đặt kết thúc thì vào trong folder project-nodejs rồi chạy câu lệnh: npm install
	Khởi động server nodejs: npm start rồi sau đó vào http://localhost:3000/ để xem project được tạo ra

- Express structure:
	Tìm hiểu một số folder và tập tin khi mình tạo ra bằng Express generator
	Folder bin: có chứa tập tin là www. Kéo vào tập tin app và module http, và thực hiện khai báo port
		--> có thể thực hiên thay đổi được giá trị của port ở đây
	Folder node_modules: Khi sử dụng npm để cài đặt những thư viện, module để cài đặt về thì nó sẽ nằm 
		trong folder này(express, ejs)
		Khi mà thực hiện copy source code từ máy này sang máy khác thì chỉ cần Copy hết các tập tin và thư
			mục ngoại trừ thư mục node_modules này rồi sau đó dùng câu lệnh npm install để cài đặt --> nó 
			tạo ra folder node_modules và tự động download các package module về, chúng ta sử dụng các package
			module nào thì nó đều khai báo trong package.json
	Folder public: Là nơi chứa hình ảnh trong ứng dụng, js trong javascripts, css trong stylesheets
	Folder routes: Giúp ta khai báo các đường dẫn--> điều hướng đến các trang cần mở
	Folder views: Chứa các tập tin view
	Tập tin app.js: 
		Thực hiện kéo vào module express: var express = require('express')
		Tạo ra 1 app bằng cách sử dụng express: var app = express()
		app khai báo vị trí của folder views: app.set('views', path.join(__dirname, 'views')) , nếu mà mình 
			không muốn folder views có tên là views mà là tên khác thì chỉ cần cấu hình lại ở đây
		Cấu hình view engine: app.set('view engine', 'ejs')
		app.use(express.static(path.join(__dirname, 'public'))): Khai báo các tài nguyên về css, js, image thì
			vào bên trong folder public để lấy lên, nếu ko muốn để tên là public thì mình có thể đổi lại là được
		Khai báo sử dụng routes:
			app.use('/', indexRouter), trong đó: var indexRouter = require('./routes/index');
			app.use('/users', usersRouter), trong đó: var usersRouter = require('./routes/users');

- Nodemon: Ta muốn mỗi lần chỉnh sửa gì đó mà ko cần Stop lại server và khởi động lại server bằng npm start nữa
	mà nó sẽ tự động thực hiện --> cần phải sử dụng được nodemon trong Express generator.
	Keyword: Express generator auto restart
	Cài đặt nodemon: npm install -g nodemon
	Để sử dụng được nodemon:
		"scripts": {
			"start": "nodemon ./bin/www"
		},
	Start server bằng: npm start

- Sử dụng Router:
	Link: https://expressjs.com/en/guide/routing.html
	Route paths: Cũng có thể áp dụng biểu thức chính quy
		app.get('/ab(cd)?e', function (req, res) {
			res.send('ab(cd)?e')
		})
		--> đường dẫn sẽ match với các trường hợp là: /abe hoặc /abcde
	Route parameters: Tham số truyền trên URL
		Route path: /users/:userId/books/:bookId
		Request URL: http://localhost:3000/users/34/books/8989
		req.params: { "userId": "34", "bookId": "8989" }
		Xác định tham số truyền trên URL:
			app.get('/users/:userId/books/:bookId', function (req, res) {
				res.send(req.params)
			})
	Một số phương thức hay dùng khi sử dụng: res.redirect(), res.render(), res.send(), res.sendFile(), res.end()...

- Sử dụng View:
	Khi ta có 1 giao diện, làm thế nào để tích hợp vào project mình đang làm
	Hiểu cách thay đổi tập tin view cho từng Router khác nhau
	Để cho dễ dàng quản lý views thì trong folder views tạo thêm các folder để quản lý riêng cho các phần khác nhau
		chẳng hạn như: items, categories... --> Biết cách nhóm các view đối với các phần quản lý khác nhau
	Ở đây ta có itmes.js trong routes đóng vai trò giống như Controller
	---> Làm rõ hơn về cách sử dụng của Router và cách kéo view vào trong 1 Router nào đó.

- View - Include:
	Trong Folder views tạo thêm 1 folder nữa là elements
	Keyword: ejs include file
		cú pháp: <% include filename %>
	---> Biết cách kéo một tập tin vào bên trong một tập tin nào đó

- Kỹ thuật nhúng giao diện và module mở rộng: Tách giao diện thì mình sẽ tìm các phần giao diện chung để tách riêng ra
	--> Làm như vậy giúp ta thuận lợi khi maintain
	Tách giao diện phần navbar
	Cách Format code: chuyển về html --> chuột phải --> Format Document
	header: Tách riêng những phần nằm trong thẻ <head>
	script: Tách riêng những thẻ script được nhúng vào
	Để vào được các tập tin Css thì đường dẫn đúng là: http://localhost:6969/public/
	Khi tách các tập tin script và Header ra thì thứ tự bị thay đổi --> cần phải có base href để định lại đường dẫn
		đặt trong thẻ <head> ---> <base href="/">
	Keyword: html base href
	Folder pages: Để định nghĩa view của từng trang, quản lý các view chẳng hạn như qua lý các view dashboard, items
	Khi thay đổi vị trí của các tập tin view thì phần nội dung trong routes phần render() cũng phải thay đổi theo
	html format: Dùng để format code html
	Mỗi trang khác nhau thì có 1 Title khác nhau, nếu như mà thay đổi cấu trúc html của nó thì có bao nhiêu trang -> 
		phải thay đổi bấy nhiêu lần. Thay vì cứ mỗi trang mình phải lặp lại cấu trúc html của title thì mình sẽ tách nó
		ra thành 1 file riêng để khi mà khi thay đổi cấu trúc html dành cho title thì chỉ cần sửa ở 1 chỗ mà thôi
	In ra giá trị được truyền từ Router ra View: <%= pageTitle %>
	--> Tách ra thêm 1 phần quản lý title
	Keyword: ejs --> https://ejs.co/
	Nhúng giao diện cho phần add items
	Ở cứ mỗi trang thì mỗi view của nó tương đối là ít --> không cần Copy cấu trúc html của toàn bộ trang, nếu như mà 
		cấu trúc html của trang thay đổi thì mình phải đi tất cả các trang để thay đổi
		để tối ưu mã html thì ở mỗi trang, nó chỉ chứa mã html của chính nó --> mà ko cần chứa mã của toàn bộ trang
	Tùy thuộc vào việc mình sử dụng template engine là gì thì nó sẽ có package để tách được phần layouts ra
	Keyword: express-ejs-layouts --> https://www.npmjs.com/package/express-ejs-layouts
	Cài đặt: npm install express-ejs-layouts
	Khi cài đặt thành công thì kiểm tra trong file package.json và folder node_modules thì thấy nó đã có thêm 
		express-ejs-layouts
	Sau khi cài đặt xong thì import nó vào tập tin chạy chính app.js để sử dụng: 
		var expressLayouts = require('express-ejs-layouts');
	Thứ tự sắp xếp các module trong app.js:
		module của hệ thống 
		module cài thêm vào
		module tự viết
			var createError = require('http-errors');
			var express = require('express');
			var path = require('path');
			var cookieParser = require('cookie-parser');
			var logger = require('morgan');

			var expressLayouts = require('express-ejs-layouts');

			var indexRouter = require('./routes/index');
			var usersRouter = require('./routes/users');
	Khai báo sử dụng: app.use(expressLayouts);
	Set custom default layout: app.set('layout', 'layouts/layout');
	Tùy thuộc vào vị trí layout được đặt ở đâu thì tương ứng ta sẽ có đường dẫn, đường dẫn sẽ được tính từ Folder views
	In ra content: <%- body %>
	---> Trong app.js mình cài đặt express-ejs-layouts, khai báo sử dụng layout default là backend, trong backend thì 
		khai báo sử dụng cho phần content là <%- body %>

- Setup Router:
	Truy cập vào mỗi trang bằng cách gắn link
	Phần quản lý đường link thì mình có các đường link cho người quản trị và các đường link cho người sử dụng bình thường
		ở phần này mình sẽ xây dựng cho phần quản lý admin
	Theo cách viết ở trên thì trong file app.js mình cần import rất nhiều các Router vào, theo cách viết như vậy thì sẽ làm cho app.js
		có nhiều dòng. Ý tưởng ở đây là trong routes mình sẽ kéo các Router khác vào--> trong app.js mình chỉ cần kéo 
		file đại diện của từng phần(items, categories...) vào mà thôi, đồng thời giúp cho phần routes cũng rất dễ quản lý
		res.render('pages/home/index', { pageTitle: 'HomePage' }) --> Cách viết đúng
		res.render('/pages/home/index', { pageTitle: 'HomePage' }) --> Cách viết sai
	Đối với phần routes thì chia ra 2 phần là backend và frontend để dễ quản lý--> trong app.js chit cần import vào backend và
		frontend là được ---> đến khi thêm 1 view mới cho backend hoặc frontend thì chỉ cần viết trong routes/backend và
		routes/frontend rồi import và trong index của 2 thằng này là được

- Prefix Admin:
	Trong ứng dụng thì khả năng mở rộng, khả năng chuyển biến linh hoặt của nó phải cao
	Local variable: Là variable có thể sử dụng trong ứng dụng của mình
		app.locals.systemConfig = 'admin123'

- Error Page:
	Khi truy cập vào một đường dẫn không tồn tại --> phần error handler sẽ được gọi --> nó sẽ render về tập tin là error
		khi render ra trang error thì sẽ phát sinh lỗi bởi vì hiện tại app đang sử dụng layout là backend, layout này import
		vào title-page --> trong đây có sử đến pageTitle. Việc này dẫn đến khi render ra trang error thì nó chưa được truyền
		vào biến pageTitle --> lỗi bị phát sinh --> muốn không có lỗi thì khi render ra trang error thì chỉ cần truyền vào
		thêm biến pageTitle
	Có thể thay đổi cho trang Error như vị trí, nội dung hiển thị...

- Review NodeJS:
	Tìm hiểu cơ bản về nodejs
	Cơ bản về cách dùng ExpressJs
	routes: Phân ra thành folder backend dành cho Router cho phần quản trị backend
			frontend dành cho phần quản trị frontend
	views: Tách ra cho từng trang riêng
	Giảm thiểu mã nguồn trùng lặp bằng cách sử dụng layouts backend
	Ngoài việc sử dụng template engine là ejs mình cũng đã sử dụng thêm 1 module nữa đó là express-ejs-layouts