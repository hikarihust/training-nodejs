<% include ./../../helpers/show-message-chat %>
<div class="box box-primary direct-chat direct-chat-primary">
    <div class="box-header with-border">
        <h3 class="box-title">Direct Chat</h3>
    </div>
    <!-- /.box-header -->
    <div class="box-body">
        <!-- Conversations are loaded here -->
        <div class="direct-chat-messages" id="area-list-message">
            <%- showMessageChat(itemsChat, userInfo) %>
        </div>
    </div>
    <!-- /.box-body -->
    <div class="box-footer">
        <form action="#" method="post" id="form-chat">
            <div class="input-group">
                <input type="text" name="message" placeholder="Type Message ..." id="message" class="form-control emojionearea-editor">
                <span class="input-group-btn">
                    <button type="submit" class="btn btn-primary btn-flat">Send</button>
                </span>
            </div>
        </form>
    </div>
</div>
<script type="text/javascript">
    $(function() {
        let $elmInputMessage  = $('input#message');
        let $elmInputUsername = $('input[name="username"]');
        let $elmInputAvatar   = $('input[name="avatar"]');
        let $elmFormChat      = $('form#form-chat');
        let $elmListMessage   = $('div#area-list-message');
        let $tmplMessageChat  = $('#template-chat-message')
        let $tmplNotifyError  = $('#template-notify-error');
        let $tmplUserTyping   = $('#template-user-typing');
        let timeoutObj;

        let emojioneArea = $elmInputMessage.emojioneArea();

        let socket              = io.connect('http://localhost:8181');

        socket.on("SERVER_RETURN_ALL_MESSAGE", (data) => {
            let typeShow = "";
            let classUsername = "pull-left";
            let classCreated = "pull-right";

            if($elmInputUsername.val() == data.username ){
                typeShow        = "right";
                classUsername   = "pull-right";
                classCreated    = "pull-left";
            }

            let template = $tmplMessageChat.html();
            $elmListMessage.append(Mustache.render(template, { typeShow, classUsername, classCreated, data }));
        });

        socket.on("SERVER_RETURN_ERROR", (data) => {
            let template = $tmplNotifyError.html();
            $(Mustache.render(template, { data })).insertBefore($elmFormChat);
        });

        socket.on("SERVER_SEND_USER_TYPING", (data) => {
            if(data.showTyping) {
                let template = $tmplUserTyping.html();
                $(Mustache.render(template, { data })).insertBefore($elmFormChat);
            } else {
                $("p.show-typing").remove();
            }
        });

        // CLIENT SEND MESSAGE
        $elmFormChat.submit(function() {
            socket.emit('CLIENT_SEND_ALL_MESSAGE', {
                content: $elmInputMessage.val(),
                username: $elmInputUsername.val(),
                avatar: $elmInputAvatar.val()
            });

            $elmInputMessage.val('');
            emojioneArea.data("emojioneArea").setText('');
            $("div#area-notify").remove();
            return false;
        });

        function cancelTyping() {
            socket.emit('CLIENT_SEND_TYPING', { username: $elmInputUsername.val(), showTyping: false });
        }

        $elmInputMessage.data("emojioneArea").on("keyup paste emojibtn.click", function() {
            if (this.getText().length > 3) {
                clearTimeout(timeoutObj);
                timeoutObj = setTimeout(cancelTyping, 2000);
                socket.emit('CLIENT_SEND_TYPING', { username: $elmInputUsername.val(), showTyping: true });
            }
        })
    })
</script> 